"0","#| label: helper-functions"
"0",""
"0","# Progress bar wrapper with time estimation"
"0","with_progress_bar <- function(expr, message = ""Processing"", steps = 100) {"
"0","  p <- progressr::progressor(steps = steps)"
"0","  "
"0","  result <- withVisible(expr)"
"0","  "
"0","  if(result$visible) result$value else invisible(result$value)"
"0","}"
"0",""
"0","# Memory usage tracker"
"0","check_memory <- function(label = """") {"
"0","  mem_info <- Sys.meminfo()"
"0","  proc_mem <- Sys.procmem()"
"0","  "
"0","  cat(cli::rule(glue(""Memory Status: {label}"")), ""\n"")"
"0","  cat(glue(""  Available RAM: {mem_info$freeram}\n""))"
"0","  cat(glue(""  Process Usage: {proc_mem}\n""))"
"0","  cat(glue(""  % Used: {round((1 - as.numeric(mem_info$freeram) / as.numeric(mem_info$totalram)) * 100, 2)}%\n""))"
"0","  cat(cli::rule(), ""\n"")"
"0","  "
"0","  invisible(list(available = mem_info$freeram, used = proc_mem))"
"0","}"
"0",""
"0","# GPU availability checker"
"0","check_gpu <- function() {"
"0","  if(torch::cuda_is_available()) {"
"0","    cat(cli::col_green(""âœ“ CUDA GPU available!\n""))"
"0","    system(""nvidia-smi"", intern = TRUE)"
"0","    return(TRUE)"
"0","  } else {"
"0","    cat(cli::col_yellow(""âš  No CUDA GPU detected. Using CPU.\n""))"
"0","    return(FALSE)"
"0","  }"
"0","}"
"0",""
"0","# Time estimation wrapper"
"0","time_step <- function(expr, step_name = ""Step"") {"
"0","  cli::cli_alert_info(glue(""Starting: {step_name}""))"
"0","  start_time <- Sys.time()"
"0","  "
"0","  result <- expr"
"0","  "
"0","  end_time <- Sys.time()"
"0","  duration <- difftime(end_time, start_time, units = ""auto"")"
"0","  "
"0","  cli::cli_alert_success(glue(""Completed: {step_name} in {round(duration, 2)} {attr(duration, 'units')}""))"
"0","  "
"0","  return(result)"
"0","}"
"0",""
"0","# Safe parallel setup"
"0","setup_parallel <- function(cores = NULL) {"
"0","  if(is.null(cores)) {"
"0","    cores <- max(1, parallel::detectCores() - 1)"
"0","  }"
"0","  "
"0","  # Check if running in RStudio (which doesn't support multicore)"
"0","  if(Sys.getenv(""RSTUDIO"") == ""1"") {"
"0","    plan(multisession, workers = cores)"
"0","    cat(glue(""Parallel backend: multisession with {cores} workers\n""))"
"0","  } else {"
"0","    plan(multicore, workers = cores)"
"0","    cat(glue(""Parallel backend: multicore with {cores} workers\n""))"
"0","  }"
"0","  "
"0","  return(cores)"
"0","}"
"0",""
"0","cat(cli::col_green(""âœ“ Helper functions defined!\n""))"
"1","[32mâœ“ Helper functions defined!
[39m"
