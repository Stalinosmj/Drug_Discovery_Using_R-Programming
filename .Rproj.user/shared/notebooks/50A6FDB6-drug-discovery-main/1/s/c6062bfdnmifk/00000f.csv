"0","#| label: fingerprint-functions"
"0",""
"0","# Calculate molecular fingerprints"
"0","calculate_fingerprints <- function(smiles_vector, fp_type = ""extended"", size = 1024) {"
"0","  "
"0","  cli::cli_h2(glue(""Calculating {fp_type} Fingerprints (size={size})""))"
"0","  "
"0","  # Parse SMILES"
"0","  molecules <- future_map(smiles_vector, function(smi) {"
"0","    tryCatch({"
"0","      parse.smiles(smi)[[1]]"
"0","    }, error = function(e) NULL)"
"0","  }, .progress = TRUE)"
"0","  "
"0","  # Calculate fingerprints"
"0","  cli::cli_alert_info(""Computing fingerprints..."")"
"0","  "
"0"," fp_matrix <- with_progress({"
"0","  p <- progressor(along = molecules)"
"0","  "
"0","  future_map(seq_along(molecules), function(i) {"
"0","    mol <- molecules[[i]]"
"0","    p(message = sprintf(""Fingerprint %d/%d"", i, length(molecules)))"
"0","    "
"0","    if (is.null(mol)) {"
"0","      return(as.data.frame(t(rep(0, size))))  # Return data frame row"
"0","    }"
"0","    "
"0","    tryCatch({"
"0","      fp <- get.fingerprint(mol, type = fp_type, fp.mode = ""bit"", size = size)"
"0","      fp_vec <- numeric(size)"
"0","      if (length(fp@bits) > 0) {"
"0","        fp_vec[fp@bits] <- 1"
"0","      }"
"0","      as.data.frame(t(fp_vec))  # Convert numeric vector -> 1-row data frame"
"0","    }, error = function(e) {"
"0","      as.data.frame(t(rep(0, size)))  # Safe fallback as 1-row data frame"
"0","    })"
"0","  }, .options = furrr_options(seed = TRUE))"
"0","}) %>% bind_rows()"
"0",""
"0","  "
"0","  colnames(fp_matrix) <- paste0(""FP"", 1:size)"
"0","  "
"0","  cli::cli_alert_success(glue(""Generated {ncol(fp_matrix)} fingerprint features""))"
"0","  "
"0","  return(as.data.frame(fp_matrix))"
"0","}"
"0",""
"0","cat(cli::col_green(""âœ“ Fingerprint functions defined!\n""))"
"1","[32mâœ“ Fingerprint functions defined!
[39m"
