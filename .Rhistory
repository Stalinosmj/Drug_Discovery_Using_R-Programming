MW = NA, LogP = NA, HBD = NA, HBA = NA,
TPSA = NA, nRotB = NA, nAtoms = NA
))
}
tryCatch({
# Molecular weight
mw <- get.mol2formula(mol)@mass
# LogP (XLogP)
xlogp_desc <- eval.desc(mol, "org.openscience.cdk.qsar.descriptors.molecular.XLogPDescriptor")
logP <- xlogp_desc[[1]]
# Hydrogen bond donors
hbd <- eval.desc(mol, "org.openscience.cdk.qsar.descriptors.molecular.HBondDonorCountDescriptor")[[1]]
# Hydrogen bond acceptors
hba <- eval.desc(mol, "org.openscience.cdk.qsar.descriptors.molecular.HBondAcceptorCountDescriptor")[[1]]
# Topological polar surface area
tpsa <- eval.desc(mol, "org.openscience.cdk.qsar.descriptors.molecular.TPSADescriptor")[[1]]
# Rotatable bonds
nrotb <- eval.desc(mol, "org.openscience.cdk.qsar.descriptors.molecular.RotatableBondsCountDescriptor")[[1]]
# Atom count
natoms <- get.atom.count(mol)
data.frame(
idx = i,
MW = mw,
LogP = logP,
HBD = hbd,
HBA = hba,
TPSA = tpsa,
nRotB = nrotb,
nAtoms = natoms
)
}, error = function(e) {
data.frame(
idx = i,
MW = NA, LogP = NA, HBD = NA, HBA = NA,
TPSA = NA, nRotB = NA, nAtoms = NA
)
})
}, .options = furrr_options(seed = TRUE))
})
cli::cli_alert_success("Descriptor calculation complete!")
return(lipinski_data)
}
cat(cli::col_green("✓ Lipinski descriptor functions defined!\n"))
#| label: fingerprint-functions
# Calculate molecular fingerprints
calculate_fingerprints <- function(smiles_vector, fp_type = "extended", size = 1024) {
cli::cli_h2(glue("Calculating {fp_type} Fingerprints (size={size})"))
# Parse SMILES
molecules <- future_map(smiles_vector, function(smi) {
tryCatch({
parse.smiles(smi)[[1]]
}, error = function(e) NULL)
}, .progress = TRUE)
# Calculate fingerprints
cli::cli_alert_info("Computing fingerprints...")
fp_matrix <- with_progress({
p <- progressor(along = molecules)
future_map(seq_along(molecules), function(i) {
mol <- molecules[[i]]
p(message = sprintf("Fingerprint %d/%d", i, length(molecules)))
if(is.null(mol)) {
return(rep(0, size))
}
tryCatch({
fp <- get.fingerprint(mol, type = fp_type, fp.mode = "bit", size = size)
# Convert to binary vector
fp_vec <- numeric(size)
if(length(fp@bits) > 0) {
fp_vec[fp@bits] <- 1
}
fp_vec
}, error = function(e) {
rep(0, size)
})
}, .options = furrr_options(seed = TRUE))
}) %>% bind_rows()
colnames(fp_matrix) <- paste0("FP", 1:size)
cli::cli_alert_success(glue("Generated {ncol(fp_matrix)} fingerprint features"))
return(as.data.frame(fp_matrix))
}
cat(cli::col_green("✓ Fingerprint functions defined!\n"))
#| label: calculate-descriptors
#| eval: false
# Load clean data
bioactivity_clean <- read_csv("data/bioactivity_clean.csv")
check_memory("Before descriptor calculation")
# Calculate Lipinski descriptors
lipinski_descriptors <- time_step(
calculate_lipinski_descriptors(bioactivity_clean$canonical_smiles),
"Lipinski Descriptor Calculation"
)
# Calculate molecular fingerprints
molecular_fingerprints <- time_step(
calculate_fingerprints(
bioactivity_clean$canonical_smiles,
fp_type = "extended",
size = 1024
),
"Molecular Fingerprint Calculation"
)
#| label: fingerprint-functions
# Calculate molecular fingerprints
calculate_fingerprints <- function(smiles_vector, fp_type = "extended", size = 1024) {
cli::cli_h2(glue("Calculating {fp_type} Fingerprints (size={size})"))
# Parse SMILES
molecules <- future_map(smiles_vector, function(smi) {
tryCatch({
parse.smiles(smi)[[1]]
}, error = function(e) NULL)
}, .progress = TRUE)
# Calculate fingerprints
cli::cli_alert_info("Computing fingerprints...")
fp_matrix <- with_progress({
p <- progressor(along = molecules)
future_map(seq_along(molecules), function(i) {
mol <- molecules[[i]]
p(message = sprintf("Fingerprint %d/%d", i, length(molecules)))
if (is.null(mol)) {
return(as.data.frame(t(rep(0, size))))  # Return data frame row
}
tryCatch({
fp <- get.fingerprint(mol, type = fp_type, fp.mode = "bit", size = size)
fp_vec <- numeric(size)
if (length(fp@bits) > 0) {
fp_vec[fp@bits] <- 1
}
as.data.frame(t(fp_vec))  # Convert numeric vector -> 1-row data frame
}, error = function(e) {
as.data.frame(t(rep(0, size)))  # Safe fallback as 1-row data frame
})
}, .options = furrr_options(seed = TRUE))
}) %>% bind_rows()
colnames(fp_matrix) <- paste0("FP", 1:size)
cli::cli_alert_success(glue("Generated {ncol(fp_matrix)} fingerprint features"))
return(as.data.frame(fp_matrix))
}
cat(cli::col_green("✓ Fingerprint functions defined!\n"))
#| label: calculate-descriptors
#| eval: false
# Load clean data
bioactivity_clean <- read_csv("data/bioactivity_clean.csv")
check_memory("Before descriptor calculation")
# Calculate Lipinski descriptors
lipinski_descriptors <- time_step(
calculate_lipinski_descriptors(bioactivity_clean$canonical_smiles),
"Lipinski Descriptor Calculation"
)
# Calculate molecular fingerprints
molecular_fingerprints <- time_step(
calculate_fingerprints(
bioactivity_clean$canonical_smiles,
fp_type = "extended",
size = 1024
),
"Molecular Fingerprint Calculation"
)
# Combine all features
full_dataset <- bind_cols(
bioactivity_clean,
lipinski_descriptors %>% select(-idx),
molecular_fingerprints
)
# Apply Lipinski's Rule of Five
full_dataset <- full_dataset %>%
mutate(
lipinski_violations =
(MW > 500) +
(LogP > 5) +
(HBD > 5) +
(HBA > 10),
druglike = lipinski_violations <= 1
)
# Remove low variance features
cli::cli_alert_info("Removing low-variance features...")
fp_cols <- grep("^FP", names(full_dataset), value = TRUE)
variance_check <- full_dataset %>%
select(all_of(fp_cols)) %>%
summarise(across(everything(), var, na.rm = TRUE))
low_var_cols <- names(variance_check)[variance_check[1,] < 0.01]
full_dataset <- full_dataset %>% select(-any_of(low_var_cols))
cli::cli_alert_success(glue("Removed {length(low_var_cols)} low-variance features"))
# Save complete dataset
write_csv(full_dataset, "data/full_dataset_with_descriptors.csv")
cli::cli_alert_success("Complete dataset saved!")
check_memory("After descriptor calculation")
#| label: visualize-chemical-space
#| eval: false
#| fig-width: 12
#| fig-height: 8
# Load full dataset
full_dataset <- read_csv("data/full_dataset_with_descriptors.csv")
# Chemical space plot
p1 <- ggplot(full_dataset, aes(x = MW, y = LogP, color = bioactivity_class)) +
geom_point(alpha = 0.6, size = 2.5) +
geom_hline(yintercept = 5, linetype = "dashed", color = "red", linewidth = 0.8) +
geom_vline(xintercept = 500, linetype = "dashed", color = "red", linewidth = 0.8) +
scale_color_manual(
values = c(
"Highly Active" = "#e41a1c",
"Active" = "#377eb8",
"Moderately Active" = "#4daf4a",
"Inactive" = "#999999"
)
) +
labs(
title = "Chemical Space Analysis - Lipinski Descriptors",
subtitle = "Molecular Weight vs LogP with Lipinski thresholds",
x = "Molecular Weight (Da)",
y = "LogP (Lipophilicity)",
color = "Bioactivity Class"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold", size = 16)
)
# TPSA vs LogP
p2 <- ggplot(full_dataset, aes(x = TPSA, y = LogP, color = pIC50)) +
geom_point(alpha = 0.6, size = 2.5) +
scale_color_viridis_c(option = "plasma") +
labs(
title = "Polar Surface Area vs Lipophilicity",
x = "TPSA (Ų)",
y = "LogP",
color = "pIC50"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(face = "bold"))
# Combine plots
combined_plot <- p1 / p2 +
plot_annotation(
title = "Bioinformatics Drug Discovery - Chemical Space Exploration",
theme = theme(plot.title = element_text(face = "bold", size = 18))
)
print(combined_plot)
ggsave("plots/chemical_space_analysis.png", combined_plot, width = 12, height = 10, dpi = 300)
#| label: visualize-bioactivity
#| eval: false
#| fig-width: 10
#| fig-height: 6
# pIC50 distribution
p_dist <- ggplot(full_dataset, aes(x = pIC50, fill = bioactivity_class)) +
geom_histogram(bins = 50, alpha = 0.7, color = "black") +
scale_fill_manual(
values = c(
"Highly Active" = "#e41a1c",
"Active" = "#377eb8",
"Moderately Active" = "#4daf4a",
"Inactive" = "#999999"
)
) +
labs(
title = "Distribution of Bioactivity (pIC50)",
x = "pIC50",
y = "Count",
fill = "Bioactivity Class"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold", size = 16)
)
print(p_dist)
ggsave("plots/bioactivity_distribution.png", p_dist, width = 10, height = 6, dpi = 300)
library(rcdk)
library(rJava)
.jinit()  # Try manually
# Test parsing a known good SMILES
test_mol <- tryCatch({parse.smiles("CCO")[[1]]}, error = function(e) e)
print(test_mol)
smiles_vector <- bioactivity_clean$canonical_smiles
parsed <- lapply(smiles_vector, function(smi) {
tryCatch({parse.smiles(smi)[[1]]}, error = function(e) NULL)
})
prop_null <- mean(sapply(parsed, is.null))
cat(sprintf("Percent unparseable SMILES: %.1f%%\n", prop_null * 100))
test_mol <- parse.smiles(bioactivity_clean$canonical_smiles[1])[[1]]
mw <- tryCatch(get.mol2formula(test_mol)@mass, error = function(e) NA)
logp <- tryCatch(eval.desc(test_mol, "org.openscience.cdk.qsar.descriptors.molecular.XLogPDescriptor")[[1]], error = function(e) NA)
hbd <- tryCatch(eval.desc(test_mol, "org.openscience.cdk.qsar.descriptors.molecular.HBondDonorCountDescriptor")[[1]], error = function(e) NA)
cat(sprintf("Test MW: %s | LogP: %s | HBD: %s\n", mw, logp, hbd))
library(purrr)
smiles_subset <- bioactivity_clean$canonical_smiles[1:10]
desc_results <- map_dfr(smiles_subset, function(smi) {
mol <- parse.smiles(smi)[[1]]
data.frame(
MW = tryCatch(get.mol2formula(mol)@mass, error = function(e) NA),
LogP = tryCatch(eval.desc(mol, "org.openscience.cdk.qsar.descriptors.molecular.XLogPDescriptor")[[1]], error = function(e) NA),
HBD = tryCatch(eval.desc(mol, "org.openscience.cdk.qsar.descriptors.molecular.HBondDonorCountDescriptor")[[1]], error = function(e) NA)
)
})
print(desc_results)
#| label: lipinski-functions
# Calculate Lipinski descriptors using rcdk
calculate_lipinski_descriptors <- function(smiles_vector) {
cli::cli_h2("Calculating Lipinski Descriptors (serial mode)")
# Parse SMILES
cli::cli_alert_info("Parsing SMILES structures...")
molecules <- purrr::map(smiles_vector, function(smi) {
tryCatch({
parse.smiles(smi)[[1]]
}, error = function(e) NULL)
})
# Set up a progress bar
total <- length(molecules)
pb <- txtProgressBar(min = 0, max = total, style = 3)
# Calculate descriptors serially
lipinski_data <- purrr::map_dfr(seq_along(molecules), function(i) {
setTxtProgressBar(pb, i)
mol <- molecules[[i]]
if (is.null(mol)) {
return(data.frame(
idx = i,
MW = NA, LogP = NA, HBD = NA, HBA = NA,
TPSA = NA, nRotB = NA, nAtoms = NA
))
}
tryCatch({
mw <- get.mol2formula(mol)@mass
logP <- eval.desc(mol, "org.openscience.cdk.qsar.descriptors.molecular.XLogPDescriptor")[[1]]
hbd <- eval.desc(mol, "org.openscience.cdk.qsar.descriptors.molecular.HBondDonorCountDescriptor")[[1]]
hba <- eval.desc(mol, "org.openscience.cdk.qsar.descriptors.molecular.HBondAcceptorCountDescriptor")[[1]]
tpsa <- eval.desc(mol, "org.openscience.cdk.qsar.descriptors.molecular.TPSADescriptor")[[1]]
nrotb <- eval.desc(mol, "org.openscience.cdk.qsar.descriptors.molecular.RotatableBondsCountDescriptor")[[1]]
natoms <- get.atom.count(mol)
data.frame(
idx = i,
MW = mw,
LogP = logP,
HBD = hbd,
HBA = hba,
TPSA = tpsa,
nRotB = nrotb,
nAtoms = natoms
)
}, error = function(e) {
data.frame(
idx = i,
MW = NA, LogP = NA, HBD = NA, HBA = NA,
TPSA = NA, nRotB = NA, nAtoms = NA
)
})
})
close(pb)
cli::cli_alert_success("Descriptor calculation complete!")
return(lipinski_data)
}
cat(cli::col_green("✓ Lipinski descriptor functions defined!\n"))
#| label: fingerprint-functions
# Calculate molecular fingerprints
calculate_fingerprints <- function(smiles_vector, fp_type = "extended", size = 1024) {
cli::cli_h2(glue("Calculating {fp_type} Fingerprints (size={size})"))
# Parse SMILES
molecules <- future_map(smiles_vector, function(smi) {
tryCatch({
parse.smiles(smi)[[1]]
}, error = function(e) NULL)
}, .progress = TRUE)
# Calculate fingerprints
cli::cli_alert_info("Computing fingerprints...")
fp_matrix <- with_progress({
p <- progressor(along = molecules)
future_map(seq_along(molecules), function(i) {
mol <- molecules[[i]]
p(message = sprintf("Fingerprint %d/%d", i, length(molecules)))
if (is.null(mol)) {
return(as.data.frame(t(rep(0, size))))  # Return data frame row
}
tryCatch({
fp <- get.fingerprint(mol, type = fp_type, fp.mode = "bit", size = size)
fp_vec <- numeric(size)
if (length(fp@bits) > 0) {
fp_vec[fp@bits] <- 1
}
as.data.frame(t(fp_vec))  # Convert numeric vector -> 1-row data frame
}, error = function(e) {
as.data.frame(t(rep(0, size)))  # Safe fallback as 1-row data frame
})
}, .options = furrr_options(seed = TRUE))
}) %>% bind_rows()
colnames(fp_matrix) <- paste0("FP", 1:size)
cli::cli_alert_success(glue("Generated {ncol(fp_matrix)} fingerprint features"))
return(as.data.frame(fp_matrix))
}
cat(cli::col_green("✓ Fingerprint functions defined!\n"))
#| label: calculate-descriptors
#| eval: false
# Load clean data
bioactivity_clean <- read_csv("data/bioactivity_clean.csv")
check_memory("Before descriptor calculation")
# Calculate Lipinski descriptors
lipinski_descriptors <- time_step(
calculate_lipinski_descriptors(bioactivity_clean$canonical_smiles),
"Lipinski Descriptor Calculation"
)
# Calculate molecular fingerprints
molecular_fingerprints <- time_step(
calculate_fingerprints(
bioactivity_clean$canonical_smiles,
fp_type = "extended",
size = 1024
),
"Molecular Fingerprint Calculation"
)
# Combine all features
full_dataset <- bind_cols(
bioactivity_clean,
lipinski_descriptors %>% select(-idx),
molecular_fingerprints
)
# Apply Lipinski's Rule of Five
full_dataset <- full_dataset %>%
mutate(
lipinski_violations =
(MW > 500) +
(LogP > 5) +
(HBD > 5) +
(HBA > 10),
druglike = lipinski_violations <= 1
)
# Remove low variance features
cli::cli_alert_info("Removing low-variance features...")
fp_cols <- grep("^FP", names(full_dataset), value = TRUE)
variance_check <- full_dataset %>%
select(all_of(fp_cols)) %>%
summarise(across(everything(), var, na.rm = TRUE))
low_var_cols <- names(variance_check)[variance_check[1,] < 0.01]
full_dataset <- full_dataset %>% select(-any_of(low_var_cols))
cli::cli_alert_success(glue("Removed {length(low_var_cols)} low-variance features"))
# Save complete dataset
write_csv(full_dataset, "data/full_dataset_with_descriptors.csv")
cli::cli_alert_success("Complete dataset saved!")
check_memory("After descriptor calculation")
#| label: visualize-chemical-space
#| eval: false
#| fig-width: 12
#| fig-height: 8
# Load full dataset
full_dataset <- read_csv("data/full_dataset_with_descriptors.csv")
# Chemical space plot
p1 <- ggplot(full_dataset, aes(x = MW, y = LogP, color = bioactivity_class)) +
geom_point(alpha = 0.6, size = 2.5) +
geom_hline(yintercept = 5, linetype = "dashed", color = "red", linewidth = 0.8) +
geom_vline(xintercept = 500, linetype = "dashed", color = "red", linewidth = 0.8) +
scale_color_manual(
values = c(
"Highly Active" = "#e41a1c",
"Active" = "#377eb8",
"Moderately Active" = "#4daf4a",
"Inactive" = "#999999"
)
) +
labs(
title = "Chemical Space Analysis - Lipinski Descriptors",
subtitle = "Molecular Weight vs LogP with Lipinski thresholds",
x = "Molecular Weight (Da)",
y = "LogP (Lipophilicity)",
color = "Bioactivity Class"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold", size = 16)
)
# TPSA vs LogP
p2 <- ggplot(full_dataset, aes(x = TPSA, y = LogP, color = pIC50)) +
geom_point(alpha = 0.6, size = 2.5) +
scale_color_viridis_c(option = "plasma") +
labs(
title = "Polar Surface Area vs Lipophilicity",
x = "TPSA (Ų)",
y = "LogP",
color = "pIC50"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(face = "bold"))
# Combine plots
combined_plot <- p1 / p2 +
plot_annotation(
title = "Bioinformatics Drug Discovery - Chemical Space Exploration",
theme = theme(plot.title = element_text(face = "bold", size = 18))
)
print(combined_plot)
ggsave("plots/chemical_space_analysis.png", combined_plot, width = 12, height = 10, dpi = 300)
#| label: visualize-bioactivity
#| eval: false
#| fig-width: 10
#| fig-height: 6
# pIC50 distribution
p_dist <- ggplot(full_dataset, aes(x = pIC50, fill = bioactivity_class)) +
geom_histogram(bins = 50, alpha = 0.7, color = "black") +
scale_fill_manual(
values = c(
"Highly Active" = "#e41a1c",
"Active" = "#377eb8",
"Moderately Active" = "#4daf4a",
"Inactive" = "#999999"
)
) +
labs(
title = "Distribution of Bioactivity (pIC50)",
x = "pIC50",
y = "Count",
fill = "Bioactivity Class"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold", size = 16)
)
print(p_dist)
ggsave("plots/bioactivity_distribution.png", p_dist, width = 10, height = 6, dpi = 300)
